{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMUsaDm1gHcUx5sbR3UnoHL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/andlimalegal/Colab/blob/main/Lista%20de%20exerc%C3%ADcios%20de%20For\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ontagens e Repetições 1. Contagem de 1 a 10\n",
        "\n",
        "Tarefa: Escreva um programa que exiba os números de 1 a 10 usando for."
      ],
      "metadata": {
        "id": "8Hs7aUSMkE0r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibir os números de 1 a 10\n",
        "for numero in range(1, 11):\n",
        "    print(numero)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lkEyT_dOjyrT",
        "outputId": "23a295b0-a7a4-4b36-a3c5-d91109637d2b"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Contagem Personalizada\n",
        "\n",
        "Tarefa: Peça ao usuário um número e exiba uma contagem de 1 até esse número."
      ],
      "metadata": {
        "id": "bt7U6IkIkGTx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "numero = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Exibir uma contagem de 1 até o número fornecido\n",
        "for i in range(1, numero + 1):\n",
        "    print(i)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yY8WG8PHjgcz",
        "outputId": "bdfe7bfa-fbe5-40d6-f492-d470c8e7c2bb"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 2\n",
            "1\n",
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Contagem Regressiva\n",
        "\n",
        "Tarefa: Exiba uma contagem regressiva de 10 até 1 e, ao final, exiba \"Fogo!\"."
      ],
      "metadata": {
        "id": "6H1GGksEjITD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Contagem regressiva de 10 até 1\n",
        "for i in range(10, 0, -1):\n",
        "    print(i)\n",
        "\n",
        "# Exibir \"Fogo!\" após a contagem\n",
        "print(\"Fogo!\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4LnHK6p5jSgU",
        "outputId": "17622f77-3b9b-46e0-9bc9-96cbd833c5fe"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n",
            "9\n",
            "8\n",
            "7\n",
            "6\n",
            "5\n",
            "4\n",
            "3\n",
            "2\n",
            "1\n",
            "Fogo!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Contagem com Passo Personalizado\n",
        "\n",
        "Tarefa: Peça ao usuário três números: início, fim e passo e exiba a sequência correspondente."
      ],
      "metadata": {
        "id": "b1dib7w8k_lC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar os números de início, fim e passo ao usuário\n",
        "inicio = int(input(\"Digite o número de início: \"))\n",
        "fim = int(input(\"Digite o número de fim: \"))\n",
        "passo = int(input(\"Digite o passo: \"))\n",
        "\n",
        "# Exibir a sequência correspondente\n",
        "for numero in range(inicio, fim + 1, passo):\n",
        "    print(numero)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cs70g85ik5xz",
        "outputId": "fdb6fe69-4cd6-4572-ca2d-6d70621c8dbb"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite o número de início: 1\n",
            "Digite o número de fim: 20\n",
            "Digite o passo: 2\n",
            "1\n",
            "3\n",
            "5\n",
            "7\n",
            "9\n",
            "11\n",
            "13\n",
            "15\n",
            "17\n",
            "19\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "5. Números Pares entre 1 e 20\n",
        "\n",
        "Tarefa: Exiba todos os números pares de 1 a 20."
      ],
      "metadata": {
        "id": "a750RU2slFNx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibir os números pares de 1 a 20\n",
        "for numero in range(2, 21, 2):\n",
        "    print(numero)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qvzqJX3TlPyB",
        "outputId": "d1479709-74e3-49c2-b55e-c8a107d7a2c9"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "4\n",
            "6\n",
            "8\n",
            "10\n",
            "12\n",
            "14\n",
            "16\n",
            "18\n",
            "20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Operações Matemáticas\n",
        "\n",
        "6. Soma dos Números de 1 a N\n",
        "\n",
        "Tarefa: Solicite um número ao usuário e exiba a soma de 1 até esse número."
      ],
      "metadata": {
        "id": "b3DDMa3GlkwY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "numero = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Calcular a soma de 1 até o número fornecido\n",
        "soma = sum(range(1, numero + 1))\n",
        "\n",
        "# Exibir o resultado\n",
        "print(f\"A soma dos números de 1 até {numero} é: {soma}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VUd77jnZlfN5",
        "outputId": "b25edee7-d5be-475e-b676-4a75b80a51c7"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 10\n",
            "A soma dos números de 1 até 10 é: 55\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Tabuada de um Número\n",
        "\n",
        "Tarefa: Peça ao usuário um número e exiba a tabuada desse número de 1 a 10."
      ],
      "metadata": {
        "id": "0ZYvKuSamBNQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "numero = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Exibir a tabuada do número de 1 a 10\n",
        "print(f\"Tabuada de {numero}:\")\n",
        "for i in range(1, 11):\n",
        "    print(f\"{numero} x {i} = {numero * i}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q6iYML2EmHj4",
        "outputId": "9da8ce21-e225-49e5-c044-3ce6ffe6e8f0"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 5\n",
            "Tabuada de 5:\n",
            "5 x 1 = 5\n",
            "5 x 2 = 10\n",
            "5 x 3 = 15\n",
            "5 x 4 = 20\n",
            "5 x 5 = 25\n",
            "5 x 6 = 30\n",
            "5 x 7 = 35\n",
            "5 x 8 = 40\n",
            "5 x 9 = 45\n",
            "5 x 10 = 50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. Média de Notas\n",
        "\n",
        "Tarefa: Peça 5 notas ao usuário e calcule a média delas."
      ],
      "metadata": {
        "id": "ibtavd3jmKoo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Inicializar uma lista para armazenar as notas\n",
        "notas = []\n",
        "\n",
        "# Solicitar 5 notas ao usuário\n",
        "for i in range(1, 6):\n",
        "    nota = float(input(f\"Digite a nota {i}: \"))\n",
        "    notas.append(nota)\n",
        "\n",
        "# Calcular a média das notas\n",
        "media = sum(notas) / len(notas)\n",
        "\n",
        "# Exibir a média\n",
        "print(f\"A média das notas é: {media:.2f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zkl2HJ5emOwa",
        "outputId": "3c7289b0-8fd5-4be2-f970-a50ce4134a1a"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite a nota 1: 8\n",
            "Digite a nota 2: 5\n",
            "Digite a nota 3: 9\n",
            "Digite a nota 4: 7\n",
            "Digite a nota 5: 5\n",
            "A média das notas é: 6.80\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. Soma dos Dígitos de um Número\n",
        "\n",
        "Tarefa: Peça um número ao usuário e some seus dígitos (exemplo: 123 → 1+2+3 = 6)."
      ],
      "metadata": {
        "id": "Cd6pp6HfmfLY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "numero = input(\"Digite um número: \")\n",
        "\n",
        "# Calcular a soma dos dígitos\n",
        "soma_digitos = sum(int(digito) for digito in numero)\n",
        "\n",
        "# Exibir o resultado\n",
        "print(f\"A soma dos dígitos do número {numero} é: {soma_digitos}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nlGjxaNamlsm",
        "outputId": "d3120d3a-11b5-4460-f7f8-ed30271707c9"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 6\n",
            "A soma dos dígitos do número 6 é: 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. Fatorial de um Número\n",
        "\n",
        "Tarefa: Solicite um número ao usuário e exiba o seu fatorial (n!)."
      ],
      "metadata": {
        "id": "MJ6HTmqKs4dW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "\n",
        "# Solicitar um número ao usuário\n",
        "numero = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Calcular o fatorial usando a função math.factorial\n",
        "fatorial = math.factorial(numero)\n",
        "\n",
        "# Exibir o resultado\n",
        "print(f\"O fatorial de {numero} é: {fatorial}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "teDxXv_ntClW",
        "outputId": "89747674-9196-4beb-f719-53afd0be56b7"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 5\n",
            "O fatorial de 5 é: 120\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Estruturas Condicionais com Repetição\n",
        "\n",
        "11. Números Pares e Ímpares\n",
        "\n",
        "Tarefa: Escreva um programa que exiba os números de 1 a 20 e indique se cada um é par ou ímpar."
      ],
      "metadata": {
        "id": "hfhlHtC8tJtl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Exibir os números de 1 a 20 com a indicação de par ou ímpar\n",
        "for numero in range(1, 21):\n",
        "    if numero % 2 == 0:\n",
        "        print(f\"{numero} é par\")\n",
        "    else:\n",
        "        print(f\"{numero} é ímpar\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C4LFKNmmte4l",
        "outputId": "6e1a8f2f-4a4f-400f-c453-b46995df14da"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 é ímpar\n",
            "2 é par\n",
            "3 é ímpar\n",
            "4 é par\n",
            "5 é ímpar\n",
            "6 é par\n",
            "7 é ímpar\n",
            "8 é par\n",
            "9 é ímpar\n",
            "10 é par\n",
            "11 é ímpar\n",
            "12 é par\n",
            "13 é ímpar\n",
            "14 é par\n",
            "15 é ímpar\n",
            "16 é par\n",
            "17 é ímpar\n",
            "18 é par\n",
            "19 é ímpar\n",
            "20 é par\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. Tabuada Personalizada\n",
        "\n",
        "Tarefa: Peça um número ao usuário e exiba sua tabuada de 1 a 10, mas se for múltiplo de 3, substitua pelo texto \"Multiplo de 3\"."
      ],
      "metadata": {
        "id": "BSgZnbbnuC_9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "numero = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Exibir a tabuada de 1 a 10 com substituição de múltiplos de 3\n",
        "print(f\"Tabuada personalizada de {numero}:\")\n",
        "for i in range(1, 11):\n",
        "    resultado = numero * i\n",
        "    if resultado % 3 == 0:\n",
        "        print(f\"{numero} x {i} = Multiplo de 3\")\n",
        "    else:\n",
        "        print(f\"{numero} x {i} = {resultado}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p6LiP7LjuAia",
        "outputId": "ff8d32a2-91f0-4885-d912-e206cf567ac4"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 10\n",
            "Tabuada personalizada de 10:\n",
            "10 x 1 = 10\n",
            "10 x 2 = 20\n",
            "10 x 3 = Multiplo de 3\n",
            "10 x 4 = 40\n",
            "10 x 5 = 50\n",
            "10 x 6 = Multiplo de 3\n",
            "10 x 7 = 70\n",
            "10 x 8 = 80\n",
            "10 x 9 = Multiplo de 3\n",
            "10 x 10 = 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "13. Soma dos Números Pares e Ímpares\n",
        "\n",
        "Tarefa: Peça um número ao usuário e some separadamente os pares e os ímpares de 1 até esse número."
      ],
      "metadata": {
        "id": "ioK2g-cPvId6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "numero = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Inicializar as variáveis para as somas\n",
        "soma_pares = 0\n",
        "soma_impares = 0\n",
        "\n",
        "# Calcular as somas dos pares e ímpares\n",
        "for i in range(1, numero + 1):\n",
        "    if i % 2 == 0:\n",
        "        soma_pares += i\n",
        "    else:\n",
        "        soma_impares += i\n",
        "\n",
        "# Exibir os resultados\n",
        "print(f\"A soma dos números pares de 1 até {numero} é: {soma_pares}\")\n",
        "print(f\"A soma dos números ímpares de 1 até {numero} é: {soma_impares}\")\n"
      ],
      "metadata": {
        "id": "erdY9yxmvB0E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "x2nYSPybvP3O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "14. Maior e Menor Número da Lista\n",
        "\n",
        "Tarefa: Peça ao usuário para digitar 5 números e exiba o maior e o menor deles."
      ],
      "metadata": {
        "id": "ULVNstQovPnw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar 5 números ao usuário e armazená-los em uma lista\n",
        "numeros = []\n",
        "for i in range(1, 6):\n",
        "    numero = float(input(f\"Digite o número {i}: \"))\n",
        "    numeros.append(numero)\n",
        "\n",
        "# Determinar o maior e o menor número\n",
        "maior = max(numeros)\n",
        "menor = min(numeros)\n",
        "\n",
        "# Exibir os resultados\n",
        "print(f\"O maior número é: {maior}\")\n",
        "print(f\"O menor número é: {menor}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MEnTRtKcvYBd",
        "outputId": "7ed6568e-edbb-4970-ddb8-39c0c3b36091"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite o número 1: 7\n",
            "Digite o número 2: 5\n",
            "Digite o número 3: 3\n",
            "Digite o número 4: 8\n",
            "Digite o número 5: 9\n",
            "O maior número é: 9.0\n",
            "O menor número é: 3.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "15. Números Positivos e Negativos\n",
        "\n",
        "Tarefa: Peça ao usuário 10 números e exiba quantos são positivos, negativos ou zero."
      ],
      "metadata": {
        "id": "mEj62vJ80Ozq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Inicializar contadores para positivos, negativos e zeros\n",
        "positivos = 0\n",
        "negativos = 0\n",
        "zeros = 0\n",
        "\n",
        "# Solicitar 10 números ao usuário\n",
        "for i in range(1, 11):\n",
        "    numero = float(input(f\"Digite o número {i}: \"))\n",
        "    if numero > 0:\n",
        "        positivos += 1\n",
        "    elif numero < 0:\n",
        "        negativos += 1\n",
        "    else:\n",
        "        zeros += 1\n",
        "\n",
        "# Exibir os resultados\n",
        "print(f\"Quantidade de números positivos: {positivos}\")\n",
        "print(f\"Quantidade de números negativos: {negativos}\")\n",
        "print(f\"Quantidade de números iguais a zero: {zeros}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sOF8pOXQ0AI3",
        "outputId": "1f3224fc-7479-4327-8123-2ab9bd522e66"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite o número 1: 2\n",
            "Digite o número 2: 6\n",
            "Digite o número 3: 9\n",
            "Digite o número 4: 3\n",
            "Digite o número 5: 7\n",
            "Digite o número 6: 2\n",
            "Digite o número 7: 12\n",
            "Digite o número 8: 10\n",
            "Digite o número 9: 17\n",
            "Digite o número 10: 14\n",
            "Quantidade de números positivos: 10\n",
            "Quantidade de números negativos: 0\n",
            "Quantidade de números iguais a zero: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "-33BBaDp0DPR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "16. Contagem de Números Múltiplos de 3 e 5\n",
        "\n",
        "Tarefa: Peça ao usuário um número N e exiba quantos números entre 1 e N são múltiplos de 3 ou 5."
      ],
      "metadata": {
        "id": "YVP4spOB0SYa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "N = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Inicializar o contador\n",
        "contador = 0\n",
        "\n",
        "# Verificar os múltiplos de 3 ou 5 no intervalo de 1 a N\n",
        "for i in range(1, N + 1):\n",
        "    if i % 3 == 0 or i % 5 == 0:\n",
        "        contador += 1\n",
        "\n",
        "# Exibir o resultado\n",
        "print(f\"Existem {contador} números entre 1 e {N} que são múltiplos de 3 ou 5.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c7z41OAl0cYq",
        "outputId": "94c3f988-218d-4b73-d718-f83a7574f57b"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 10\n",
            "Existem 5 números entre 1 e 10 que são múltiplos de 3 ou 5.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "17. Verificador de Paridade de Um Número\n",
        "\n",
        "Tarefa: Solicite ao usuário um número e verifique se ele é par ou ímpar.\n",
        "\n",
        "Se o número for par, divida-o por 2 e exiba o resultado.\n",
        "\n",
        "Se o número for ímpar, multiplique-o por 3 e exiba o resultado."
      ],
      "metadata": {
        "id": "SSLfPQW10ejg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "numero = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Verificar se o número é par ou ímpar e realizar a operação\n",
        "if numero % 2 == 0:\n",
        "    resultado = numero / 2\n",
        "    print(f\"O número {numero} é par. Dividindo por 2, temos: {resultado}\")\n",
        "else:\n",
        "    resultado = numero * 3\n",
        "    print(f\"O número {numero} é ímpar. Multiplicando por 3, temos: {resultado}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3go2AZVh0mmo",
        "outputId": "50921e42-8df5-42f3-9831-a812de427cce"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 6\n",
            "O número 6 é par. Dividindo por 2, temos: 3.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "18. Números Múltiplos de 3 e 5\n",
        "\n",
        "Tarefa: Peça ao usuário um número N e exiba todos os números de 1 até N que são múltiplos de 3 e 5."
      ],
      "metadata": {
        "id": "J-M4BvQg0tQf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "N = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Exibir os números múltiplos de 3 e 5\n",
        "print(f\"Números múltiplos de 3 e 5 entre 1 e {N}:\")\n",
        "for i in range(1, N + 1):\n",
        "    if i % 3 == 0 and i % 5 == 0:\n",
        "        print(i)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WFDkhSVl0s2w",
        "outputId": "0612113a-5706-4eec-cc4a-a417b75e17db"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 4\n",
            "Números múltiplos de 3 e 5 entre 1 e 4:\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "19. Adivinhação de Número\n",
        "\n",
        "Tarefa: O computador escolhe um número aleatório de 1 a 10, e o usuário tem 3 tentativas para adivinhar. Dê dicas se o número é maior ou menor."
      ],
      "metadata": {
        "id": "9Q5tcLl30saf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "\n",
        "# O computador escolhe um número aleatório de 1 a 10\n",
        "numero_secreto = random.randint(1, 10)\n",
        "\n",
        "# O usuário tem 3 tentativas\n",
        "tentativas = 3\n",
        "\n",
        "print(\"Tente adivinhar o número que estou pensando! É um número entre 1 e 10.\")\n",
        "\n",
        "while tentativas > 0:\n",
        "    # Solicitar um palpite ao usuário\n",
        "    palpite = int(input(\"Digite seu palpite: \"))\n",
        "\n",
        "    if palpite == numero_secreto:\n",
        "        print(\"Parabéns! Você adivinhou o número.\")\n",
        "        break\n",
        "    elif palpite < numero_secreto:\n",
        "        print(\"O número é maior.\")\n",
        "    else:\n",
        "        print(\"O número é menor.\")\n",
        "\n",
        "    tentativas -= 1\n",
        "    if tentativas > 0:\n",
        "        print(f\"Você ainda tem {tentativas} tentativa(s).\")\n",
        "    else:\n",
        "        print(f\"Suas tentativas acabaram! O número era {numero_secreto}.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "29nsyBqZ08KV",
        "outputId": "b4477105-612c-40f7-954c-36050e17de82"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tente adivinhar o número que estou pensando! É um número entre 1 e 10.\n",
            "Digite seu palpite: 7\n",
            "O número é menor.\n",
            "Você ainda tem 2 tentativa(s).\n",
            "Digite seu palpite: 3\n",
            "O número é menor.\n",
            "Você ainda tem 1 tentativa(s).\n",
            "Digite seu palpite: 9\n",
            "O número é menor.\n",
            "Suas tentativas acabaram! O número era 2.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "20. Números Primos\n",
        "\n",
        "Tarefa: Crie um programa que solicite ao usuário um número e informe se ele é primo ou não. Lembre-se de que um número primo é aquele que é divisível apenas por 1 e por ele mesmo."
      ],
      "metadata": {
        "id": "m1hvojXN1S68"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Solicitar um número ao usuário\n",
        "numero = int(input(\"Digite um número: \"))\n",
        "\n",
        "# Verificar se o número é primo\n",
        "if numero > 1:\n",
        "    for i in range(2, int(numero ** 0.5) + 1):\n",
        "        if numero % i == 0:\n",
        "            print(f\"O número {numero} não é primo. É divisível por {i}.\")\n",
        "            break\n",
        "    else:\n",
        "        print(f\"O número {numero} é primo.\")\n",
        "else:\n",
        "    print(f\"O número {numero} não é primo.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-TI6Psho1XX5",
        "outputId": "bf888764-890f-42a9-d521-f1dcacf29743"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite um número: 7\n",
            "O número 7 é primo.\n"
          ]
        }
      ]
    }
  ]
}